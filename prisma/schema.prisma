datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  CLIENT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    @db.VarChar(255)
  emailVerified DateTime?
  name          String    @db.VarChar(100)
  phone_number  String    @db.VarChar(20)
  address       String    @db.VarChar(255)
  city          String    @db.VarChar(50)
  state         String    @db.VarChar(50)
  gender        String
  orders        Order[]
  role          UserRole  @default(CLIENT)
  accounts      Account[]
}

model Product {
  id          String   @id @default(cuid())
  productName String
  description String   @db.Text
  price       String
  imageUrl    String
  category    String
  quantity    String
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String    @id @default(cuid())
  userId    String
  total     Float
  status    String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Blog {
  id         String    @id @default(cuid())
  title      String    @db.VarChar(255)
  bodyText   String    @db.Text
  coverImage String
  comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  username  String   @db.VarChar(255)
  comment   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
